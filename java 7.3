CREATE DATABASE studentdb;
USE studentdb;

CREATE TABLE Student (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(50),
    Department VARCHAR(50),
    Marks DOUBLE
);
package model;

public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    // Constructor
    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    // Getters and Setters
    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    public double getMarks() { return marks; }
    public void setMarks(double marks) { this.marks = marks; }

    // toString for display
    @Override
    public String toString() {
        return String.format("%-10d %-20s %-15s %-10.2f",
                studentID, name, department, marks);
    }
}
package controller;

import java.sql.*;
import java.util.*;
import model.Student;

public class StudentDAO {

    // Database configuration
    private final String URL = "jdbc:mysql://localhost:3306/studentdb";
    private final String USER = "root";       // replace with your MySQL username
    private final String PASSWORD = "password"; // replace with your MySQL password

    // Get connection
    private Connection getConnection() throws SQLException, ClassNotFoundException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // CREATE
    public void addStudent(Student s) {
        String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (Connection con = getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setInt(1, s.getStudentID());
            pst.setString(2, s.getName());
            pst.setString(3, s.getDepartment());
            pst.setDouble(4, s.getMarks());

            int rows = pst.executeUpdate();
            System.out.println(rows > 0 ? "✅ Student added successfully!" : "⚠️ Failed to add student.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // READ
    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Student";

        try (Connection con = getConnection();
             Statement st = con.createStatement();
             ResultSet rs = st.executeQuery(sql)) {

            while (rs.next()) {
                Student s = new Student(
                    rs.getInt("StudentID"),
                    rs.getString("Name"),
                    rs.getString("Department"),
                    rs.getDouble("Marks")
                );
                students.add(s);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return students;
    }

    // UPDATE
    public void updateStudent(Student s) {
        String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (Connection con = getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setString(1, s.getName());
            pst.setString(2, s.getDepartment());
            pst.setDouble(3, s.getMarks());
            pst.setInt(4, s.getStudentID());

            int rows = pst.executeUpdate();
            System.out.println(rows > 0 ? "✅ Student updated successfully!" : "⚠️ Student not found.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // DELETE
    public void deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID=?";
        try (Connection con = getConnection();
             PreparedStatement pst = con.prepareStatement(sql)) {

            pst.setInt(1, id);
            int rows = pst.executeUpdate();
            System.out.println(rows > 0 ? "✅ Student deleted successfully!" : "⚠️ Student not found.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
package view;

import java.util.*;
import model.Student;
import controller.StudentDAO;

public class StudentView {
    private Scanner sc = new Scanner(System.in);
    private StudentDAO dao = new StudentDAO();

    public void start() {
        int choice;
        do {
            System.out.println("\n=== STUDENT MANAGEMENT SYSTEM ===");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> addStudent();
                case 2 -> viewAllStudents();
                case 3 -> updateStudent();
                case 4 -> deleteStudent();
                case 5 -> System.out.println("Exiting...");
                default -> System.out.println("Invalid choice. Try again!");
            }
        } while (choice != 5);
    }

    private void addStudent() {
        System.out.print("Enter Student ID: ");
        int id = sc.nextInt();
        sc.nextLine(); // consume newline
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Department: ");
        String dept = sc.nextLine();
        System.out.print("Enter Marks: ");
        double marks = sc.nextDouble();

        dao.addStudent(new Student(id, name, dept, marks));
    }

    private void viewAllStudents() {
        List<Student> list = dao.getAllStudents();
        System.out.println("\n--- Student List ---");
        System.out.printf("%-10s %-20s %-15s %-10s%n", "ID", "Name", "Department", "Marks");
        System.out.println("----------------------------------------------------------");
        for (Student s : list) {
            System.out.println(s);
        }
    }

    private void updateStudent() {
        System.out.print("Enter Student ID to update: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter New Name: ");
        String name = sc.nextLine();
        System.out.print("Enter New Department: ");
        String dept = sc.nextLine();
        System.out.print("Enter New Marks: ");
        double marks = sc.nextDouble();

        dao.updateStudent(new Student(id, name, dept, marks));
    }

    private void deleteStudent() {
        System.out.print("Enter Student ID to delete: ");
        int id = sc.nextInt();
        dao.deleteStudent(id);
    }
}
import view.StudentView;

public class Main {
    public static void main(String[] args) {
        StudentView view = new StudentView();
        view.start();
    }
}
